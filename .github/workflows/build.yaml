name: Build Platform Target

on:
  workflow_dispatch:
  repository_dispatch:
    types: ['build-ready']
  #create:
  push:
    branches: ['gh-bash']
    tags:
      - '**'
  #push:

#permissions:
#  contents: read 

env:
  ITCH_IO_PUBLISH: 'false'
  # Set ITCH_IO_API_KEY in Repository Secrets

# Github 'on: create' sends event 'push' on tags push and 'create' on new branches.
# job 'build' filters out create events
jobs:
  build:
    runs-on: ubuntu-latest
    #if: github.event.type != 'create'
    outputs:
      TAG_PUSH: ${{ steps.setenv.outputs.TAG_PUSH }}
      PRERELEASE: ${{ steps.setenv.outputs.PRERELEASE }}
      GIT_TAG: ${{ steps.setenv.outputs.GIT_TAG }}
      GIT_SHA: ${{ steps.setenv.outputs.GIT_SHA }}
      ITCH_IO_PUBLISH: ${{ steps.setenv.outputs.ITCH_IO_PUBLISH }}
      TAG_NAME: ${{ steps.tag.outputs.VERSION_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: 'true'

      - name: Set env
        id: setenv
        run: |
          echo "Github Action Event: ${{ github.event_name }}"

          # If HEAD commit contains tag, event is tag push or manual workflow dispatch rerun
          if [ -n "$(git tag -l --contains HEAD)" ] && \
             [ ${{ github.event_name }} != "repository_dispatch" ]; then \
            echo "Tagged Release"; \
            TAG_PUSH=true; \
            PRERELEASE=false; \
          else \
            echo "Rolling Release"; \
            TAG_PUSH=false; \
            PRERELEASE=true; \
          fi

          GIT_TAG="$( git describe --tags --abbrev=0 || '0.0.1' )"
          GIT_SHA="$( git rev-parse --short HEAD )"

          echo "TAG_PUSH=${TAG_PUSH}" >> $GITHUB_OUTPUT;
          echo "PRERELEASE=${PRERELEASE}" >> $GITHUB_OUTPUT;
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_OUTPUT

          echo "ITCH_IO_PUBLISH=${{ env.ITCH_IO_PUBLISH }}" >> $GITHUB_OUTPUT

      - name: Test
        run: |
          echo "Github event - ${{ steps.setenv.outputs.GITHUB_REV }}"
          echo "Github tag - ${{ steps.setenv.outputs.GIT_TAG }}"
          echo "Github commit sha - ${{ steps.setenv.outputs.GIT_SHA }}"
          echo "Github is tag push - ${{ steps.setenv.outputs.TAG_PUSH }}"
          echo "Github release tag name - ${{ steps.setenv.outputs.TAG_NAME }}"
          #echo "Github event -  ${GITHUB_REV}"
          #echo "Github tag - ${GIT_TAG}"
          touch test.txt && echo 'test'>>test.txt
          touch test.txt && echo 'test'>>test_f0.8fff_linux
          touch test.txt && echo 'test'>>test_0.5ffff_windows.txt
          touch test.txt && echo 'test'>>test_0.2.2_Mac_editor4aaa.txt
          echo "Github event -  ${{ github.event.client_payload.commit_sha }}"
          
          #godot_rev: ${{ github.event.client_payload.commit_sha }}

      - name: Docker build project
        id: docker
        uses: ./docker/build-project
        with:
          nightly: 'true' 

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v-sekai-release
          path: ${{ github.workspace }}/releases

      - name: Set tag name
        id: tag
        run: |
          # Rolling release
          TAG_NAME="$( echo "${{ steps.docker.outputs.VERSION_TAG }}" | cut -d '-' -f1 )"
          if [ $TAG_PUSH == "false" ]; then \
            TAG_DATE="$( date +"%Y-%m-%d" )"; \
            TAG_VERSION="$( echo "${{ steps.docker.outputs.VERSION_TAG }}" | cut -d '-' -f2- )"; \
            TAG_NAME="${TAG_NAME}-nightly-${TAG_DATE}${TAG_VERSION}"; \
          fi
          echo "VERSION_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/gh-bash' #Change to main #github.event_name == 'push' && 
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.build.outputs.TAG_NAME }}
          #latest.v-sekai-editor-${{ github.run_number }}
          release_name: ${{ needs.build.outputs.TAG_NAME }} V-Sekai Game Release
          draft: false
          prerelease: ${{ needs.build.outputs.PRERELEASE }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: v-sekai-release
          name: v-sekai-release

      - name: Upload Release Asset
        run: |
          echo "Release Tag: ${{ needs.build.outputs.GIT_TAG }}. Uploading..."
          cd v-sekai-release
          echo "Upload to ${{ steps.create_release.outputs.upload_url }}"
          for file in *; do \
            echo "Uploading $file..."; \
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Content-Type: application/octet-stream" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${file}" \
              -T "${file}"; \
          done
          # --data-binary "@${file}"; \

  itch-enabled: # Workaround for 'job.if' lack of env context variable
    runs-on: ubuntu-latest
    needs: build
    outputs:
      enabled: ${{ steps.init.outputs.status }}
    steps:
      - name: Confirm Itch.io release 
        id: init
        run: |
          echo "status=${{ env.ITCH_IO_PUBLISH }}" >> $GITHUB_OUTPUT

  itch-upload:
    runs-on: ubuntu-latest
    needs: [build, itch-enabled]

    # Publish only on v-sekai-game tag update
    if: needs.itch-enabled.outputs.enabled == 'true' && needs.build.outputs.TAG_PUSH == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/v-sekai-release
          name: v-sekai-release

      - name: Docker Itch.io Publish
        uses: ./docker/itch-io
        with:
          api_key: ${{ secrets.ITCH_IO_API_KEY }}
          filepath: v-sekai-release
          itchio_project: projectname
          release_version: ${{ needs.build.outputs.GIT_TAG }}
